==========================
How to use ``0-add_integer`` module
==========================

Using ``add_integer()``
--------------------------
This function adds two numeric values give by arguments

_______________________
Import function to test
_______________________


>>> add_integer = __import__("0-add_integer").add_integer

__________________________
Documentation Verification
__________________________


>>> len(__import__("0-add_integer").__doc__) > 0
True

>>> len(__import__("0-add_integer").add_integer.__doc__) > 0
True

__________________________
Trivial cases
__________________________


>>> add_integer(1, 2)
3

>>> add_integer(-1, 2)
1

>>> add_integer(1, -2)
-1

>>> add_integer(0, 0)
0

________________________
Argument Cases
________________________

>>> add_integer(1)
99

>>> add_integer(None, 2)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1+2, 3+4)
10


________________________
Non numeric cases
________________________

>>> add_integer('a',10)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(10,'a')
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("a",10)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(10,"a")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("10", 1)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer("10", "1")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer('10', '1')
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(True, False)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(True, True)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(False, True)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(False, False)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(False, 1)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1, True)
Traceback (most recent call last):
TypeError: b must be an integer

________________________
Number Float Cases
________________________

>>> add_integer(3.1416, 1)
4

>>> add_integer(3.95616, 1)
4

>>> add_integer(3.95616, 5.6787887878)
8

________________________
Overflow Cases
________________________

>>> add_integer(float("inf"), 5)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(6, float("inf"))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(float("infinity"), 5)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(6, float("infinity"))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
